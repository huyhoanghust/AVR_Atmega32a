
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000744  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005da  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bb  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c3  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000183d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  64:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <read_ADC>:
    }
}

uint16_t read_ADC()
{
	ADCSRA |= (1<<ADSC);	// set ADSC sau khi set ADEN
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	86 b9       	out	0x06, r24	; 6

	loop_until_bit_is_set(ADCSRA,ADIF);	//until ADIF == 1
  72:	34 9b       	sbis	0x06, 4	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <read_ADC+0x6>
	
	return ADCW;	//ADCW la thanh ghi 16bit gop tu 2 thanh ghi ADCL va ADCH
  76:	84 b1       	in	r24, 0x04	; 4
  78:	95 b1       	in	r25, 0x05	; 5

}
  7a:	08 95       	ret

0000007c <led7>:

void led7(uint16_t val)
{
  7c:	ef 92       	push	r14
  7e:	ff 92       	push	r15
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	8c 01       	movw	r16, r24
	uint16_t nghin, tram, chuc, dvi;

	dvi		= val % 10;
  8a:	9c 01       	movw	r18, r24
  8c:	ad ec       	ldi	r26, 0xCD	; 205
  8e:	bc ec       	ldi	r27, 0xCC	; 204
  90:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
  94:	ac 01       	movw	r20, r24
  96:	56 95       	lsr	r21
  98:	47 95       	ror	r20
  9a:	56 95       	lsr	r21
  9c:	47 95       	ror	r20
  9e:	56 95       	lsr	r21
  a0:	47 95       	ror	r20
  a2:	ca 01       	movw	r24, r20
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	44 0f       	add	r20, r20
  aa:	55 1f       	adc	r21, r21
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	48 0f       	add	r20, r24
  b6:	59 1f       	adc	r21, r25
  b8:	c8 01       	movw	r24, r16
  ba:	84 1b       	sub	r24, r20
  bc:	95 0b       	sbc	r25, r21
  be:	ac 01       	movw	r20, r24
	val	/= 10;
  c0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
  c4:	ec 01       	movw	r28, r24
  c6:	d6 95       	lsr	r29
  c8:	c7 95       	ror	r28
  ca:	d6 95       	lsr	r29
  cc:	c7 95       	ror	r28
  ce:	d6 95       	lsr	r29
  d0:	c7 95       	ror	r28
	chuc	= val % 10;
  d2:	9e 01       	movw	r18, r28
  d4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
  d8:	fc 01       	movw	r30, r24
  da:	f6 95       	lsr	r31
  dc:	e7 95       	ror	r30
  de:	f6 95       	lsr	r31
  e0:	e7 95       	ror	r30
  e2:	f6 95       	lsr	r31
  e4:	e7 95       	ror	r30
  e6:	cf 01       	movw	r24, r30
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	e8 0f       	add	r30, r24
  fa:	f9 1f       	adc	r31, r25
  fc:	ce 01       	movw	r24, r28
  fe:	8e 1b       	sub	r24, r30
 100:	9f 0b       	sbc	r25, r31
 102:	fc 01       	movw	r30, r24
	val	/= 10;
 104:	98 01       	movw	r18, r16
 106:	36 95       	lsr	r19
 108:	27 95       	ror	r18
 10a:	36 95       	lsr	r19
 10c:	27 95       	ror	r18
 10e:	ab e7       	ldi	r26, 0x7B	; 123
 110:	b4 e1       	ldi	r27, 0x14	; 20
 112:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
 116:	7c 01       	movw	r14, r24
 118:	f6 94       	lsr	r15
 11a:	e7 94       	ror	r14
	tram	= val % 10;
 11c:	97 01       	movw	r18, r14
 11e:	ad ec       	ldi	r26, 0xCD	; 205
 120:	bc ec       	ldi	r27, 0xCC	; 204
 122:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
 126:	ec 01       	movw	r28, r24
 128:	d6 95       	lsr	r29
 12a:	c7 95       	ror	r28
 12c:	d6 95       	lsr	r29
 12e:	c7 95       	ror	r28
 130:	d6 95       	lsr	r29
 132:	c7 95       	ror	r28
 134:	ce 01       	movw	r24, r28
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	cc 0f       	add	r28, r28
 13c:	dd 1f       	adc	r29, r29
 13e:	cc 0f       	add	r28, r28
 140:	dd 1f       	adc	r29, r29
 142:	cc 0f       	add	r28, r28
 144:	dd 1f       	adc	r29, r29
 146:	c8 0f       	add	r28, r24
 148:	d9 1f       	adc	r29, r25
 14a:	c7 01       	movw	r24, r14
 14c:	8c 1b       	sub	r24, r28
 14e:	9d 0b       	sbc	r25, r29
 150:	ec 01       	movw	r28, r24
	val	/=10;
 152:	98 01       	movw	r18, r16
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	36 95       	lsr	r19
 15e:	27 95       	ror	r18
 160:	a5 ec       	ldi	r26, 0xC5	; 197
 162:	b0 e2       	ldi	r27, 0x20	; 32
 164:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
 168:	92 95       	swap	r25
 16a:	82 95       	swap	r24
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	89 27       	eor	r24, r25
 170:	9f 70       	andi	r25, 0x0F	; 15
 172:	89 27       	eor	r24, r25
	nghin	= val;

	PORTC	= nghin|(1<<4);
 174:	80 61       	ori	r24, 0x10	; 16
 176:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <led7+0x100>
 180:	00 c0       	rjmp	.+0      	; 0x182 <led7+0x106>
 182:	00 00       	nop
	_delay_ms(1);
	PORTC	= tram|(1<<5); //0010 0000 | (tram = 5 =0000 0101) = 0010 0101
 184:	c0 62       	ori	r28, 0x20	; 32
 186:	c5 bb       	out	0x15, r28	; 21
 188:	8f ec       	ldi	r24, 0xCF	; 207
 18a:	97 e0       	ldi	r25, 0x07	; 7
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <led7+0x110>
 190:	00 c0       	rjmp	.+0      	; 0x192 <led7+0x116>
 192:	00 00       	nop
	_delay_ms(1);
	PORTC	= chuc|(1<<6);
 194:	e0 64       	ori	r30, 0x40	; 64
 196:	e5 bb       	out	0x15, r30	; 21
 198:	8f ec       	ldi	r24, 0xCF	; 207
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <led7+0x120>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <led7+0x126>
 1a2:	00 00       	nop
	_delay_ms(1);
	PORTC	= dvi|(1<<7);
 1a4:	40 68       	ori	r20, 0x80	; 128
 1a6:	45 bb       	out	0x15, r20	; 21
 1a8:	8f ec       	ldi	r24, 0xCF	; 207
 1aa:	97 e0       	ldi	r25, 0x07	; 7
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <led7+0x130>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <led7+0x136>
 1b2:	00 00       	nop
	_delay_ms(1);
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	08 95       	ret

000001c2 <main>:
uint16_t read_ADC();	//doc gia tri ADC vao thanh ghi ADCW
void led7(uint16_t);	//xuat ra led 7seg chung anot

int main(void)
{
	DDRC	= 0xFF; //ouput
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	84 bb       	out	0x14, r24	; 20
	DDRB	= 0xFF;
 1c6:	87 bb       	out	0x17, r24	; 23

    ADMUX	= (1<<REFS0)|(1<<MUX0); //set kenh ADC1 00001 va set REFS0 chon mode 2 dien ap tham chieu
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	87 b9       	out	0x07, r24	; 7

	ADCSRA	= (1<<ADEN)|(1<<ADPS1)|(1<<ADPS0);	//set ADEN truoc khi set ADSC va chon xung clock 8 (011)
 1cc:	83 e8       	ldi	r24, 0x83	; 131
 1ce:	86 b9       	out	0x06, r24	; 6

    while (1) 
    {
		led7(read_ADC());
 1d0:	0e 94 36 00 	call	0x6c	; 0x6c <read_ADC>
 1d4:	0e 94 3e 00 	call	0x7c	; 0x7c <led7>
		if (read_ADC() > 341)
 1d8:	0e 94 36 00 	call	0x6c	; 0x6c <read_ADC>
 1dc:	86 35       	cpi	r24, 0x56	; 86
 1de:	91 40       	sbci	r25, 0x01	; 1
 1e0:	18 f0       	brcs	.+6      	; 0x1e8 <main+0x26>
		{
			PORTB	= 0xFF;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	f4 cf       	rjmp	.-24     	; 0x1d0 <main+0xe>
		}
		else 
		{
			PORTB	= 0;
 1e8:	18 ba       	out	0x18, r1	; 24
 1ea:	f2 cf       	rjmp	.-28     	; 0x1d0 <main+0xe>

000001ec <__umulhisi3>:
 1ec:	a2 9f       	mul	r26, r18
 1ee:	b0 01       	movw	r22, r0
 1f0:	b3 9f       	mul	r27, r19
 1f2:	c0 01       	movw	r24, r0
 1f4:	a3 9f       	mul	r26, r19
 1f6:	70 0d       	add	r23, r0
 1f8:	81 1d       	adc	r24, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	91 1d       	adc	r25, r1
 1fe:	b2 9f       	mul	r27, r18
 200:	70 0d       	add	r23, r0
 202:	81 1d       	adc	r24, r1
 204:	11 24       	eor	r1, r1
 206:	91 1d       	adc	r25, r1
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
