
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b7  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ff  00000000  00000000  000008e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026d  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 83 00 	call	0x106	; 0x106 <main>
  7a:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <led7seg_in>:

void led7seg_in(void);
void led7seg_display(uint8_t value);

void led7seg_in(void){
	LED_DDR=0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	LED_PORT=0xFF;
  86:	85 bb       	out	0x15, r24	; 21

	sbi(LED_1_DDR, LED_1);	//Output
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	81 bb       	out	0x11, r24	; 17
	sbi(LED_1_PORT, LED_1);	//High level
  8e:	82 b3       	in	r24, 0x12	; 18
  90:	81 60       	ori	r24, 0x01	; 1
  92:	82 bb       	out	0x12, r24	; 18
	
	sbi(LED_2_DDR, LED_2);	//Output
  94:	81 b3       	in	r24, 0x11	; 17
  96:	82 60       	ori	r24, 0x02	; 2
  98:	81 bb       	out	0x11, r24	; 17
	sbi(LED_2_PORT, LED_2);	//High level
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	08 95       	ret

000000a2 <led7seg_display>:
}
void led7seg_display(uint8_t value){

	LED_PORT = code7Seg[value / 10];
  a2:	9d ec       	ldi	r25, 0xCD	; 205
  a4:	89 9f       	mul	r24, r25
  a6:	91 2d       	mov	r25, r1
  a8:	11 24       	eor	r1, r1
  aa:	96 95       	lsr	r25
  ac:	96 95       	lsr	r25
  ae:	96 95       	lsr	r25
  b0:	e9 2f       	mov	r30, r25
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	e0 5a       	subi	r30, 0xA0	; 160
  b6:	ff 4f       	sbci	r31, 0xFF	; 255
  b8:	20 81       	ld	r18, Z
  ba:	25 bb       	out	0x15, r18	; 21
	cbi(LED_1_PORT, LED_1);	//Led 1 on
  bc:	22 b3       	in	r18, 0x12	; 18
  be:	2e 7f       	andi	r18, 0xFE	; 254
  c0:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <led7seg_display+0x24>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <led7seg_display+0x2a>
  cc:	00 00       	nop
	_delay_ms(1);
	sbi(LED_1_PORT, LED_1);	//Led 1 off
  ce:	22 b3       	in	r18, 0x12	; 18
  d0:	21 60       	ori	r18, 0x01	; 1
  d2:	22 bb       	out	0x12, r18	; 18

	LED_PORT = code7Seg[value % 10];
  d4:	99 0f       	add	r25, r25
  d6:	29 2f       	mov	r18, r25
  d8:	22 0f       	add	r18, r18
  da:	22 0f       	add	r18, r18
  dc:	92 0f       	add	r25, r18
  de:	89 1b       	sub	r24, r25
  e0:	e8 2f       	mov	r30, r24
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	e0 5a       	subi	r30, 0xA0	; 160
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 81       	ld	r24, Z
  ea:	85 bb       	out	0x15, r24	; 21
	cbi(LED_2_PORT, LED_2);	//Led 2 on
  ec:	82 b3       	in	r24, 0x12	; 18
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	8f ec       	ldi	r24, 0xCF	; 207
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <led7seg_display+0x54>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <led7seg_display+0x5a>
  fc:	00 00       	nop
	_delay_ms(1);
	sbi(LED_2_PORT, LED_2);	//Led 2 off
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	82 60       	ori	r24, 0x02	; 2
 102:	82 bb       	out	0x12, r24	; 18
 104:	08 95       	ret

00000106 <main>:
}


int main(void)
{
    led7seg_in();
 106:	0e 94 41 00 	call	0x82	; 0x82 <led7seg_in>

    while (1) 
    {
		led7seg_display(12);
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	0e 94 51 00 	call	0xa2	; 0xa2 <led7seg_display>
 110:	fc cf       	rjmp	.-8      	; 0x10a <main+0x4>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
