
UART_Send.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e0  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dd  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024b  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000142d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <send>:
		//send(data[i]);
	//}
}
void send(unsigned char chr)
{
	while (bit_is_clear(UCSRA,UDRE));	//lap vo han cho toi khi UDRE=1 thi thoat, UDRE=1 nghia la UDR dang trong 
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <send>
	UDR = chr;	//gan du lieu vao thanh ghi UDR
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <main>:
int main(void)
{
	uint8_t data[3];
    //set baud rate la 57.6k, f=8MHz, U2X=0 khong nhan doi toc do truyen
	//assign value vao UBRRH truoc, sau do UBRRL
	UBRRH = 0;
  74:	10 bc       	out	0x20, r1	; 32
	UBRRL = 8;
  76:	88 e0       	ldi	r24, 0x08	; 8
  78:	89 b9       	out	0x09, r24	; 9

	//set khung truyen va kich hoat bo nhan du lieu
	UCSRA = 0x00;	//khong nhan doi, khong su dung truyen thong da xu li
  7a:	1b b8       	out	0x0b, r1	; 11
	//set URSEL len 1 de su dung thanh ghi UCSRC
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);	//set UCSZ0 va UCSZ1 len 1 de su dung data 8bit
  7c:	96 e8       	ldi	r25, 0x86	; 134
  7e:	90 bd       	out	0x20, r25	; 32
	//kich hoat bo phat du lieu
	UCSRB = (1<<TXEN);
  80:	8a b9       	out	0x0a, r24	; 10
	//truyen data 9bit 341 = 1 0101 0101 
	uint16_t chr = 341;
	uint8_t val1, val2;
	val1 = chr & 0xFF;
	val2 = (chr >> 8);
	send (val1); //85
  82:	85 e5       	ldi	r24, 0x55	; 85
  84:	0e 94 36 00 	call	0x6c	; 0x6c <send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	80 e7       	ldi	r24, 0x70	; 112
  8c:	92 e0       	ldi	r25, 0x02	; 2
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x1a>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x24>
  98:	00 00       	nop
	_delay_ms(100);
	send (val2); //1
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <send>
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	80 e7       	ldi	r24, 0x70	; 112
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x32>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x3c>
  b0:	00 00       	nop
	_delay_ms(100);
	send ('$');
  b2:	84 e2       	ldi	r24, 0x24	; 36
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <send>
	//data[2] = '/n';
	//for(int i = 0; i<=2; i++)
	//{
		//send(data[i]);
	//}
}
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
