
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000058e  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051c  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e6  00000000  00000000  00000c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d8  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <display>:
		display();
    }
}
void display (void)
{
	OCR0	=9;
  6c:	89 e0       	ldi	r24, 0x09	; 9
  6e:	8c bf       	out	0x3c, r24	; 60
	TCCR0	|= (1<<CS02)|(1<<CS01)|(1<<CS00);
  70:	83 b7       	in	r24, 0x33	; 51
  72:	87 60       	ori	r24, 0x07	; 7
  74:	83 bf       	out	0x33, r24	; 51
	do
	{
		PORTD	= TCNT0;
  76:	82 b7       	in	r24, 0x32	; 50
  78:	82 bb       	out	0x12, r24	; 18
	}
	while(!(TIFR&(1<<OCF0)));
  7a:	08 b6       	in	r0, 0x38	; 56
  7c:	01 fe       	sbrs	r0, 1
  7e:	fb cf       	rjmp	.-10     	; 0x76 <display+0xa>

	TIFR	|= 1<<OCF0;
  80:	88 b7       	in	r24, 0x38	; 56
  82:	82 60       	ori	r24, 0x02	; 2
  84:	88 bf       	out	0x38, r24	; 56
  86:	08 95       	ret

00000088 <main>:

void display (void);
int main(void)
{
    /* Replace with your application code */
	DDRD	|=(1<<DDRD0)|(1<<DDRD1)|(1<<DDRD2)|(1<<DDRD3);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	8f 60       	ori	r24, 0x0F	; 15
  8c:	81 bb       	out	0x11, r24	; 17
	PORTD	= 0x00;
  8e:	12 ba       	out	0x12, r1	; 18
	//ctc mode
	TCCR0	|=1<<WGM01;
  90:	83 b7       	in	r24, 0x33	; 51
  92:	88 60       	ori	r24, 0x08	; 8
  94:	83 bf       	out	0x33, r24	; 51

    while (1) 
    {
		display();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <display>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0xe>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
