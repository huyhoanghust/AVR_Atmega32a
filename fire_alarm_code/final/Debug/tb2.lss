
tb2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  0080006a  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad6  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000673  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042e  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038d  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059e  00000000  00000000  00001e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000023bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  8a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_command>:
	 }
 }
 void send(unsigned char chr)
 {
	 while (bit_is_clear(UCSRA,UDRE));	//lap vo han khi UDRE=0; khi UDRE=1 con trong thi thoat
	 UDR = chr;
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	92 60       	ori	r25, 0x02	; 2
  a8:	98 bb       	out	0x18, r25	; 24
  aa:	32 e0       	ldi	r19, 0x02	; 2
  ac:	3a 95       	dec	r19
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_command+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_command+0x20>
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	9d 7f       	andi	r25, 0xFD	; 253
  b6:	98 bb       	out	0x18, r25	; 24
  b8:	ef e8       	ldi	r30, 0x8F	; 143
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_command+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_command+0x30>
  c2:	00 00       	nop
  c4:	28 b3       	in	r18, 0x18	; 24
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	92 2f       	mov	r25, r18
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	88 bb       	out	0x18, r24	; 24
  dc:	32 e0       	ldi	r19, 0x02	; 2
  de:	3a 95       	dec	r19
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_command+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_command+0x52>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_command+0x5a>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <LCD_char>:
  f4:	98 b3       	in	r25, 0x18	; 24
  f6:	9f 70       	andi	r25, 0x0F	; 15
  f8:	28 2f       	mov	r18, r24
  fa:	20 7f       	andi	r18, 0xF0	; 240
  fc:	92 2b       	or	r25, r18
  fe:	98 bb       	out	0x18, r25	; 24
 100:	98 b3       	in	r25, 0x18	; 24
 102:	91 60       	ori	r25, 0x01	; 1
 104:	98 bb       	out	0x18, r25	; 24
 106:	98 b3       	in	r25, 0x18	; 24
 108:	92 60       	ori	r25, 0x02	; 2
 10a:	98 bb       	out	0x18, r25	; 24
 10c:	32 e0       	ldi	r19, 0x02	; 2
 10e:	3a 95       	dec	r19
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_char+0x1a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_char+0x20>
 114:	98 b3       	in	r25, 0x18	; 24
 116:	9d 7f       	andi	r25, 0xFD	; 253
 118:	98 bb       	out	0x18, r25	; 24
 11a:	ef e8       	ldi	r30, 0x8F	; 143
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_char+0x2a>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_char+0x30>
 124:	00 00       	nop
 126:	28 b3       	in	r18, 0x18	; 24
 128:	f0 e1       	ldi	r31, 0x10	; 16
 12a:	8f 9f       	mul	r24, r31
 12c:	c0 01       	movw	r24, r0
 12e:	11 24       	eor	r1, r1
 130:	92 2f       	mov	r25, r18
 132:	9f 70       	andi	r25, 0x0F	; 15
 134:	89 2b       	or	r24, r25
 136:	88 bb       	out	0x18, r24	; 24
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	32 e0       	ldi	r19, 0x02	; 2
 140:	3a 95       	dec	r19
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_char+0x4c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_char+0x52>
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_char+0x5a>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <LCD_init>:
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	87 bb       	out	0x17, r24	; 23
 15a:	85 e3       	ldi	r24, 0x35	; 53
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_init+0x6>
 160:	00 00       	nop
 162:	88 e2       	ldi	r24, 0x28	; 40
 164:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	8a 95       	dec	r24
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_init+0x26>
 180:	00 00       	nop
 182:	08 95       	ret

00000184 <LCD_string>:
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	8c 01       	movw	r16, r24
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	03 c0       	rjmp	.+6      	; 0x19a <LCD_string+0x16>
 194:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_char>
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	f8 01       	movw	r30, r16
 19c:	ec 0f       	add	r30, r28
 19e:	fd 1f       	adc	r31, r29
 1a0:	80 81       	ld	r24, Z
 1a2:	81 11       	cpse	r24, r1
 1a4:	f7 cf       	rjmp	.-18     	; 0x194 <LCD_string+0x10>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <LCD_string_xy>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ea 01       	movw	r28, r20
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	41 f4       	brne	.+16     	; 0x1ca <LCD_string_xy+0x1a>
 1ba:	60 31       	cpi	r22, 0x10	; 16
 1bc:	30 f4       	brcc	.+12     	; 0x1ca <LCD_string_xy+0x1a>
 1be:	86 2f       	mov	r24, r22
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	80 68       	ori	r24, 0x80	; 128
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <LCD_string_xy+0x2c>
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	39 f4       	brne	.+14     	; 0x1dc <LCD_string_xy+0x2c>
 1ce:	60 31       	cpi	r22, 0x10	; 16
 1d0:	28 f4       	brcc	.+10     	; 0x1dc <LCD_string_xy+0x2c>
 1d2:	86 2f       	mov	r24, r22
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	80 6c       	ori	r24, 0xC0	; 192
 1d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_command>
 1dc:	ce 01       	movw	r24, r28
 1de:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_string>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <main>:
 1e8:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_init>
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8a bb       	out	0x1a, r24	; 26
 1f0:	1b ba       	out	0x1b, r1	; 27
 1f2:	10 bc       	out	0x20, r1	; 32
 1f4:	88 e0       	ldi	r24, 0x08	; 8
 1f6:	89 b9       	out	0x09, r24	; 9
 1f8:	1b b8       	out	0x0b, r1	; 11
 1fa:	86 e8       	ldi	r24, 0x86	; 134
 1fc:	80 bd       	out	0x20, r24	; 32
 1fe:	88 e9       	ldi	r24, 0x98	; 152
 200:	8a b9       	out	0x0a, r24	; 10
 202:	78 94       	sei
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x1c>

00000206 <__vector_13>:
 }

 ISR(USART_RXC_vect)	//ngat khi USART hoan tat nhan
 {
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	2f 93       	push	r18
 212:	3f 93       	push	r19
 214:	4f 93       	push	r20
 216:	5f 93       	push	r21
 218:	6f 93       	push	r22
 21a:	7f 93       	push	r23
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
 220:	af 93       	push	r26
 222:	bf 93       	push	r27
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	 data[cnt] = UDR;
 228:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 22c:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 230:	8c b1       	in	r24, 0x0c	; 12
 232:	e1 59       	subi	r30, 0x91	; 145
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	80 83       	st	Z, r24
	 if(data[cnt] == '$')
 238:	84 32       	cpi	r24, 0x24	; 36
 23a:	61 f4       	brne	.+24     	; 0x254 <__vector_13+0x4e>
	 {
		 val = data[0]|(data[1] << 8);
 23c:	ef e6       	ldi	r30, 0x6F	; 111
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	20 81       	ld	r18, Z
 242:	81 81       	ldd	r24, Z+1	; 0x01
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	98 2f       	mov	r25, r24
 248:	88 27       	eor	r24, r24
 24a:	82 2b       	or	r24, r18
 24c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <val+0x1>
 250:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <val>
	 }
	 if (val == 341)
 254:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <val>
 258:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <val+0x1>
 25c:	85 35       	cpi	r24, 0x55	; 85
 25e:	91 40       	sbci	r25, 0x01	; 1
 260:	89 f4       	brne	.+34     	; 0x284 <__vector_13+0x7e>
	 {
		PORTA = 0xff;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	8b bb       	out	0x1b, r24	; 27
		LCD_string_xy(1,4,"Canh bao");
 266:	40 e6       	ldi	r20, 0x60	; 96
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	64 e0       	ldi	r22, 0x04	; 4
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LCD_string_xy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	99 e6       	ldi	r25, 0x69	; 105
 276:	28 e1       	ldi	r18, 0x18	; 24
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	20 40       	sbci	r18, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <__vector_13+0x72>
 280:	00 c0       	rjmp	.+0      	; 0x282 <__vector_13+0x7c>
 282:	00 00       	nop
		 _delay_ms(1000);
	 }
	 PORTA = 0;
 284:	1b ba       	out	0x1b, r1	; 27
	 cnt++;
 286:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 28a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 294:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	 
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
