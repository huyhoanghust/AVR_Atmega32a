
lcd_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000362  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba3  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000683  00000000  00000000  00001043  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000461  00000000  00000000  000016c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d7  00000000  00000000  00001fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  7a:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
}
void LCD_clear()
{
	LCD_command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_command (0x80);		/* Cursor at home position */
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	98 bb       	out	0x18, r25	; 24
  94:	98 b3       	in	r25, 0x18	; 24
  96:	92 60       	ori	r25, 0x02	; 2
  98:	98 bb       	out	0x18, r25	; 24
  9a:	35 e0       	ldi	r19, 0x05	; 5
  9c:	3a 95       	dec	r19
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_command+0x1a>
  a0:	00 00       	nop
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	9d 7f       	andi	r25, 0xFD	; 253
  a6:	98 bb       	out	0x18, r25	; 24
  a8:	ef e1       	ldi	r30, 0x1F	; 31
  aa:	f3 e0       	ldi	r31, 0x03	; 3
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_command+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_command+0x30>
  b2:	00 00       	nop
  b4:	28 b3       	in	r18, 0x18	; 24
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	92 2f       	mov	r25, r18
  c0:	9f 70       	andi	r25, 0x0F	; 15
  c2:	89 2b       	or	r24, r25
  c4:	88 bb       	out	0x18, r24	; 24
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	35 e0       	ldi	r19, 0x05	; 5
  ce:	3a 95       	dec	r19
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_command+0x4c>
  d2:	00 00       	nop
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	88 bb       	out	0x18, r24	; 24
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_command+0x5a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_command+0x60>
  e2:	08 95       	ret

000000e4 <LCD_char>:
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	9f 70       	andi	r25, 0x0F	; 15
  e8:	28 2f       	mov	r18, r24
  ea:	20 7f       	andi	r18, 0xF0	; 240
  ec:	92 2b       	or	r25, r18
  ee:	98 bb       	out	0x18, r25	; 24
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	91 60       	ori	r25, 0x01	; 1
  f4:	98 bb       	out	0x18, r25	; 24
  f6:	98 b3       	in	r25, 0x18	; 24
  f8:	92 60       	ori	r25, 0x02	; 2
  fa:	98 bb       	out	0x18, r25	; 24
  fc:	35 e0       	ldi	r19, 0x05	; 5
  fe:	3a 95       	dec	r19
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_char+0x1a>
 102:	00 00       	nop
 104:	98 b3       	in	r25, 0x18	; 24
 106:	9d 7f       	andi	r25, 0xFD	; 253
 108:	98 bb       	out	0x18, r25	; 24
 10a:	ef e1       	ldi	r30, 0x1F	; 31
 10c:	f3 e0       	ldi	r31, 0x03	; 3
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_char+0x2a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_char+0x30>
 114:	00 00       	nop
 116:	28 b3       	in	r18, 0x18	; 24
 118:	f0 e1       	ldi	r31, 0x10	; 16
 11a:	8f 9f       	mul	r24, r31
 11c:	c0 01       	movw	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	92 2f       	mov	r25, r18
 122:	9f 70       	andi	r25, 0x0F	; 15
 124:	89 2b       	or	r24, r25
 126:	88 bb       	out	0x18, r24	; 24
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	88 bb       	out	0x18, r24	; 24
 12e:	35 e0       	ldi	r19, 0x05	; 5
 130:	3a 95       	dec	r19
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_char+0x4c>
 134:	00 00       	nop
 136:	88 b3       	in	r24, 0x18	; 24
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	8a e0       	ldi	r24, 0x0A	; 10
 13e:	8a 95       	dec	r24
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_char+0x5a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_char+0x60>
 144:	08 95       	ret

00000146 <LCD_init>:
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	87 bb       	out	0x17, r24	; 23
 14a:	8a e6       	ldi	r24, 0x6A	; 106
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_init+0x6>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_init+0xc>
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 15e:	8c e0       	ldi	r24, 0x0C	; 12
 160:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_init+0x2c>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_init+0x32>
 178:	08 95       	ret

0000017a <LCD_string>:
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	8c 01       	movw	r16, r24
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	03 c0       	rjmp	.+6      	; 0x190 <LCD_string+0x16>
 18a:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_char>
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	f8 01       	movw	r30, r16
 192:	ec 0f       	add	r30, r28
 194:	fd 1f       	adc	r31, r29
 196:	80 81       	ld	r24, Z
 198:	81 11       	cpse	r24, r1
 19a:	f7 cf       	rjmp	.-18     	; 0x18a <LCD_string+0x10>
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <LCD_string_xy>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ea 01       	movw	r28, r20
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	41 f4       	brne	.+16     	; 0x1c0 <LCD_string_xy+0x1a>
 1b0:	60 31       	cpi	r22, 0x10	; 16
 1b2:	30 f4       	brcc	.+12     	; 0x1c0 <LCD_string_xy+0x1a>
 1b4:	86 2f       	mov	r24, r22
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <LCD_string_xy+0x2c>
 1c0:	82 30       	cpi	r24, 0x02	; 2
 1c2:	39 f4       	brne	.+14     	; 0x1d2 <LCD_string_xy+0x2c>
 1c4:	60 31       	cpi	r22, 0x10	; 16
 1c6:	28 f4       	brcc	.+10     	; 0x1d2 <LCD_string_xy+0x2c>
 1c8:	86 2f       	mov	r24, r22
 1ca:	8f 70       	andi	r24, 0x0F	; 15
 1cc:	80 6c       	ori	r24, 0xC0	; 192
 1ce:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 bd 00 	call	0x17a	; 0x17a <LCD_string>
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <LCD_number_xy>:
}

void LCD_number_xy(char row, char col, uint32_t number)	//print number example 1234
{
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	a8 97       	sbiw	r28, 0x28	; 40
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	f8 2e       	mov	r15, r24
 1fc:	e6 2e       	mov	r14, r22
 1fe:	ca 01       	movw	r24, r20
 200:	b9 01       	movw	r22, r18
	uint32_t num[10];
	unsigned int i = 0;
 202:	00 e0       	ldi	r16, 0x00	; 0
 204:	10 e0       	ldi	r17, 0x00	; 0
	while (number / 10 !=0)
 206:	1b c0       	rjmp	.+54     	; 0x23e <LCD_number_xy+0x60>
	{
		num[i++] = number % 10;				//4>i=0...3>i=1....2>i=2....1>i=3
 208:	2a e0       	ldi	r18, 0x0A	; 10
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	0e 94 8d 01 	call	0x31a	; 0x31a <__udivmodsi4>
 214:	f8 01       	movw	r30, r16
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	a1 e0       	ldi	r26, 0x01	; 1
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	ac 0f       	add	r26, r28
 224:	bd 1f       	adc	r27, r29
 226:	ea 0f       	add	r30, r26
 228:	fb 1f       	adc	r31, r27
 22a:	60 83       	st	Z, r22
 22c:	71 83       	std	Z+1, r23	; 0x01
 22e:	82 83       	std	Z+2, r24	; 0x02
 230:	93 83       	std	Z+3, r25	; 0x03
		number /= 10;
 232:	62 2f       	mov	r22, r18
 234:	73 2f       	mov	r23, r19
 236:	84 2f       	mov	r24, r20
 238:	95 2f       	mov	r25, r21
{
	uint32_t num[10];
	unsigned int i = 0;
	while (number / 10 !=0)
	{
		num[i++] = number % 10;				//4>i=0...3>i=1....2>i=2....1>i=3
 23a:	0f 5f       	subi	r16, 0xFF	; 255
 23c:	1f 4f       	sbci	r17, 0xFF	; 255

void LCD_number_xy(char row, char col, uint32_t number)	//print number example 1234
{
	uint32_t num[10];
	unsigned int i = 0;
	while (number / 10 !=0)
 23e:	6a 30       	cpi	r22, 0x0A	; 10
 240:	71 05       	cpc	r23, r1
 242:	81 05       	cpc	r24, r1
 244:	91 05       	cpc	r25, r1
 246:	00 f7       	brcc	.-64     	; 0x208 <LCD_number_xy+0x2a>
	{
		num[i++] = number % 10;				//4>i=0...3>i=1....2>i=2....1>i=3
		number /= 10;
	}
	num[i] = number;
 248:	f8 01       	movw	r30, r16
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	2c 0f       	add	r18, r28
 258:	3d 1f       	adc	r19, r29
 25a:	e2 0f       	add	r30, r18
 25c:	f3 1f       	adc	r31, r19
 25e:	60 83       	st	Z, r22
 260:	71 83       	std	Z+1, r23	; 0x01
 262:	82 83       	std	Z+2, r24	; 0x02
 264:	93 83       	std	Z+3, r25	; 0x03
	if (row == 1 && col < 16)
 266:	31 e0       	ldi	r19, 0x01	; 1
 268:	f3 12       	cpse	r15, r19
 26a:	09 c0       	rjmp	.+18     	; 0x27e <LCD_number_xy+0xa0>
 26c:	8f e0       	ldi	r24, 0x0F	; 15
 26e:	8e 15       	cp	r24, r14
 270:	30 f0       	brcs	.+12     	; 0x27e <LCD_number_xy+0xa0>
	LCD_command((col & 0x0F) | 0x80); // di chuyen con tro ve dau dong 1 roi cong voi col
 272:	8e 2d       	mov	r24, r14
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	80 68       	ori	r24, 0x80	; 128
 278:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 27c:	1d c0       	rjmp	.+58     	; 0x2b8 <LCD_number_xy+0xda>
	else if (row == 2 && col <16)
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	f9 12       	cpse	r15, r25
 282:	1a c0       	rjmp	.+52     	; 0x2b8 <LCD_number_xy+0xda>
 284:	af e0       	ldi	r26, 0x0F	; 15
 286:	ae 15       	cp	r26, r14
 288:	b8 f0       	brcs	.+46     	; 0x2b8 <LCD_number_xy+0xda>
	LCD_command((col & 0x0F) | 0xC0); // di chuyen con tro ve dau dong 2 roi cong voi col
 28a:	8e 2d       	mov	r24, r14
 28c:	8f 70       	andi	r24, 0x0F	; 15
 28e:	80 6c       	ori	r24, 0xC0	; 192
 290:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>

	for (int j = i; j >= 0; j--)
 294:	11 c0       	rjmp	.+34     	; 0x2b8 <LCD_number_xy+0xda>
	{
		LCD_char(num[j] + 48);
 296:	f8 01       	movw	r30, r16
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	2c 0f       	add	r18, r28
 2a6:	3d 1f       	adc	r19, r29
 2a8:	e2 0f       	add	r30, r18
 2aa:	f3 1f       	adc	r31, r19
 2ac:	80 81       	ld	r24, Z
 2ae:	80 5d       	subi	r24, 0xD0	; 208
 2b0:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_char>
	if (row == 1 && col < 16)
	LCD_command((col & 0x0F) | 0x80); // di chuyen con tro ve dau dong 1 roi cong voi col
	else if (row == 2 && col <16)
	LCD_command((col & 0x0F) | 0xC0); // di chuyen con tro ve dau dong 2 roi cong voi col

	for (int j = i; j >= 0; j--)
 2b4:	01 50       	subi	r16, 0x01	; 1
 2b6:	11 09       	sbc	r17, r1
 2b8:	11 23       	and	r17, r17
 2ba:	6c f7       	brge	.-38     	; 0x296 <LCD_number_xy+0xb8>
	{
		LCD_char(num[j] + 48);
	}

}
 2bc:	a8 96       	adiw	r28, 0x28	; 40
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	08 95       	ret

000002d6 <main>:

#include <avr/io.h>
#include "LCD.h"

int main(void)
{
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <main+0x6>
 2dc:	00 d0       	rcall	.+0      	; 0x2de <main+0x8>
 2de:	1f 92       	push	r1
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	int val = 1234;
	char chr[5] = "good";
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	e0 e6       	ldi	r30, 0x60	; 96
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	de 01       	movw	r26, r28
 2ec:	11 96       	adiw	r26, 0x01	; 1
 2ee:	01 90       	ld	r0, Z+
 2f0:	0d 92       	st	X+, r0
 2f2:	8a 95       	dec	r24
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x18>
    LCD_init();
 2f6:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_init>
	LCD_number_xy(1,8,val);
 2fa:	22 ed       	ldi	r18, 0xD2	; 210
 2fc:	34 e0       	ldi	r19, 0x04	; 4
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	68 e0       	ldi	r22, 0x08	; 8
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_number_xy>
	LCD_string_xy(2,1,chr);
 30a:	ae 01       	movw	r20, r28
 30c:	4f 5f       	subi	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_string_xy>
 318:	ff cf       	rjmp	.-2      	; 0x318 <main+0x42>

0000031a <__udivmodsi4>:
 31a:	a1 e2       	ldi	r26, 0x21	; 33
 31c:	1a 2e       	mov	r1, r26
 31e:	aa 1b       	sub	r26, r26
 320:	bb 1b       	sub	r27, r27
 322:	fd 01       	movw	r30, r26
 324:	0d c0       	rjmp	.+26     	; 0x340 <__udivmodsi4_ep>

00000326 <__udivmodsi4_loop>:
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	ee 1f       	adc	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	a2 17       	cp	r26, r18
 330:	b3 07       	cpc	r27, r19
 332:	e4 07       	cpc	r30, r20
 334:	f5 07       	cpc	r31, r21
 336:	20 f0       	brcs	.+8      	; 0x340 <__udivmodsi4_ep>
 338:	a2 1b       	sub	r26, r18
 33a:	b3 0b       	sbc	r27, r19
 33c:	e4 0b       	sbc	r30, r20
 33e:	f5 0b       	sbc	r31, r21

00000340 <__udivmodsi4_ep>:
 340:	66 1f       	adc	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	88 1f       	adc	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	1a 94       	dec	r1
 34a:	69 f7       	brne	.-38     	; 0x326 <__udivmodsi4_loop>
 34c:	60 95       	com	r22
 34e:	70 95       	com	r23
 350:	80 95       	com	r24
 352:	90 95       	com	r25
 354:	9b 01       	movw	r18, r22
 356:	ac 01       	movw	r20, r24
 358:	bd 01       	movw	r22, r26
 35a:	cf 01       	movw	r24, r30
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
