
timercounter2_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000579  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  00000701  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001dc  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>
#include <avr/sfr_defs.h>

int main(void)
{
    DDRB	&= ~((1 << DDRB0)|(1 << DDRB2));
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8a 7f       	andi	r24, 0xFA	; 250
  70:	87 bb       	out	0x17, r24	; 23
	PORTB	|= (1 << PORTB0)|(1 << PORTB2);
  72:	88 b3       	in	r24, 0x18	; 24
  74:	85 60       	ori	r24, 0x05	; 5
  76:	88 bb       	out	0x18, r24	; 24

	DDRC	|= (1 << DDRC0)|(1 << DDRC1)|(1 << DDRC2)|(1 << DDRC3);
  78:	84 b3       	in	r24, 0x14	; 20
  7a:	8f 60       	ori	r24, 0x0F	; 15
  7c:	84 bb       	out	0x14, r24	; 20
	PORTC	|= (1 << PORTC0)|(1 << PORTC1)|(1 << PORTC2)|(1 << PORTC3);
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	8f 60       	ori	r24, 0x0F	; 15
  82:	85 bb       	out	0x15, r24	; 21
	//xung canh len 
	TCCR0	= (1 << CS02)|(1 << CS01)|(1 << CS00);
  84:	87 e0       	ldi	r24, 0x07	; 7
  86:	83 bf       	out	0x33, r24	; 51
	TCNT0	= 0;
  88:	12 be       	out	0x32, r1	; 50

    while (1) 
    {
		if (TCNT0 == 10)
  8a:	82 b7       	in	r24, 0x32	; 50
  8c:	8a 30       	cpi	r24, 0x0A	; 10
  8e:	09 f4       	brne	.+2      	; 0x92 <main+0x26>
		{
			TCNT0	= 0;
  90:	12 be       	out	0x32, r1	; 50
		}
		PORTC	= TCNT0;
  92:	82 b7       	in	r24, 0x32	; 50
  94:	85 bb       	out	0x15, r24	; 21
		if (bit_is_clear(PINB,2))
  96:	b2 99       	sbic	0x16, 2	; 22
  98:	f8 cf       	rjmp	.-16     	; 0x8a <main+0x1e>
		{
			TCNT0	= 0;
  9a:	12 be       	out	0x32, r1	; 50
			PORTC	= TCNT0;
  9c:	82 b7       	in	r24, 0x32	; 50
  9e:	85 bb       	out	0x15, r24	; 21
  a0:	f4 cf       	rjmp	.-24     	; 0x8a <main+0x1e>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
